{"version":3,"sources":["components/Game/Actions.module.css","components/Game/Cell.module.css","components/Game/Grid.module.css","components/Header.js","components/useInterval.js","components/Game/Cell.js","components/Game/Grid.js","components/Game/Actions.js","components/Game/Stats.js","components/Game/Game.js","App.js","index.js"],"names":["module","exports","Header","useInterval","callback","delay","callbackRef","useRef","useEffect","current","id","setInterval","clearInterval","Cell","React","memo","x","y","css","on","styles","off","key","className","cell","join","Grid","grid","renderRow","row","rowNum","map","i","Actions","toggle","isRunning","setSpeed","reset","playLabel","btn","activeBtn","resetCSS","readOnlyBtn","onClick","disabled","Stats","generation","spd","speed","Game","useState","setGeneration","Array","from","length","setGrid","running","setRunning","seed","seededArr","slice","Math","floor","random","newArr","count","width","height","evolveGrid","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62a57024.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Actions_btn__3zCOL\",\"activeBtn\":\"Actions_activeBtn__1b9xh\",\"readOnlyBtn\":\"Actions_readOnlyBtn__35qNF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__3ef3O\",\"on\":\"Cell_on__38JCi\",\"off\":\"Cell_off__3qSmE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__PSKdY\"};","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <h1>\r\n            Conway's Game of Life (React Hook Version)\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default Header","import { useEffect, useRef } from 'react';\r\n\r\nfunction useInterval(callback, delay) {\r\n  const callbackRef = useRef();\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      callbackRef.current();\r\n    }\r\n\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval","import React from 'react'\r\n\r\nimport styles from './Cell.module.css'\r\n\r\nconst Cell = React.memo(({x, y, on}) => {\r\n    const css = on ? styles.on : styles.off \r\n    return <div \r\n        key={`${y}_${x}`}\r\n        className={[styles.cell, css].join(' ')} \r\n    />\r\n})\r\n\r\nexport default Cell","import React from 'react'\r\nimport Cell from './Cell'\r\n\r\nimport styles from './Grid.module.css'\r\n\r\nconst Grid = ({ grid }) => {\r\n\r\n\r\n    const renderRows = () => <>\r\n        {grid.map((row, i) => renderRow(row, i))}\r\n    </>\r\n\r\n    const renderRow = (row, rowNum) => <>\r\n        {row.map((cell, i) => <Cell y={rowNum} x={i} on={cell} />)}\r\n        <br />\r\n    </>\r\n\r\n    return (\r\n        <div key=\"grid\" className={styles.grid}>\r\n            {renderRows()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid;","import React from 'react'\r\n\r\nimport styles from './Actions.module.css'\r\n\r\nconst Actions = ({toggle, isRunning, setSpeed, reset }) => {\r\n    const playLabel = isRunning ? 'Pause' : 'Play'\r\n    const css = [styles.btn, styles.activeBtn].join(' ')\r\n    const resetCSS = (!isRunning)\r\n        ? css\r\n        : [styles.btn, styles.readOnlyBtn].join(' ')\r\n\r\n    return (\r\n        <div>\r\n            <button className={css} onClick={() => toggle()}>{playLabel}</button>\r\n            <button className={resetCSS} onClick={() => reset()} disabled={isRunning}>Reset</button>\r\n            <button className={css} onClick={() => setSpeed(100)}>High</button>\r\n            <button className={css} onClick={() => setSpeed(500)}>Low</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Actions","import React from 'react'\r\n\r\nconst Stats = ({ generation, speed }) => {\r\n    const spd = speed <= 100 ? 'Fast' : 'Slow'\r\n    return (\r\n        <h2>\r\n            Generation: {generation}, Speed: {spd}\r\n        </h2>\r\n    )\r\n}\r\n\r\nexport default Stats;","import React, { useState, useEffect } from 'react'\r\nimport useInterval from '../useInterval'\r\n\r\nimport Grid from './Grid'\r\nimport Actions from './Actions'\r\nimport Stats from './Stats'\r\n\r\nconst Game = () => {\r\n    const width = 50\r\n    const height = 50\r\n    const [ generation, setGeneration ] = useState(1)\r\n    const [ grid, setGrid ] = useState(Array.from({length: height}, ()=>Array.from({length: width}, () => false)))\r\n    const [ running, setRunning ] = useState(false)\r\n    const [ speed, setSpeed ] = useState(100)\r\n\r\n    const seed = (grid) => {\r\n        let seededArr = grid.map(row => row.slice())\r\n        seededArr = seededArr.map(row => row.map(cell => {\r\n            return (Math.floor(Math.random() * 100) < 40)\r\n        }))\r\n        return seededArr\r\n    }\r\n\r\n    const evolveGrid = (grid) => {\r\n        let newArr = grid.map(row => row.slice())\r\n         newArr = newArr.map((row, y) => row.map((cell, x) => {\r\n            let count = 0\r\n            if (y > 0 && grid[y-1][x]) count++  // above\r\n            if (y > 0 && x > 0 && grid[y-1][x-1]) count++ // top left\r\n            if (y > 0 && x < width-1 && grid[y-1][x+1]) count++ // top right\r\n\r\n            if (x > 0 && grid[y][x-1]) count++ // left\r\n            if (x < width-1 && grid[y][x+1]) count++ //right\r\n\r\n            if (y < height-1 && grid[y+1][x]) count++ // bottom\r\n            if (y < height-1 && x > 0 && grid[y+1][x-1]) count++ // bottom left\r\n            if (y < height-1 && x < width-1 && grid[y+1][x+1]) count++ // bottom right\r\n\r\n            //console.log(`${x}, ${y}: ${count}`)\r\n            if(cell && (count < 2 || count > 3))\r\n                return false\r\n            if(!cell && count === 3)\r\n                return true\r\n            return cell\r\n        }))\r\n        return newArr\r\n    }\r\n\r\n    const evolve = () => {\r\n        setGrid(evolveGrid(grid))\r\n        setGeneration(generation + 1)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setGrid(seed(grid))\r\n    }, [])\r\n\r\n    useInterval(() => {\r\n        if(running)\r\n            evolve()\r\n    }, speed)\r\n\r\n    const toggleRunning = () => {\r\n        setRunning(!running)\r\n    }\r\n\r\n    const reset = () => {\r\n        setGrid(seed(grid))\r\n        setGeneration(1)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"gameContainer\">\r\n            <Actions \r\n                toggle={toggleRunning} \r\n                setSpeed={setSpeed} \r\n                isRunning={running}\r\n                reset={reset}\r\n            />\r\n            <Grid grid={grid} />\r\n            <Stats generation={generation} speed={speed} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game","import React from 'react';\n\nimport Header from './components/Header'\nimport Game from './components/Game/Game'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}